package opencvapp.soham.demo;

import android.graphics.Bitmap;
import android.graphics.drawable.BitmapDrawable;
import android.support.v4.content.res.ResourcesCompat;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.widget.ImageView;


import org.opencv.android.OpenCVLoader;
import org.opencv.android.Utils;
import org.opencv.core.Mat;
import org.opencv.imgproc.Imgproc;

public class MainActivity extends AppCompatActivity {


    static {
        System.loadLibrary("native-lib");
        if (!OpenCVLoader.initDebug()) {
        }
    }

    ImageView imageView;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

         imageView=findViewById(R.id.image);

         Bitmap bitmapInput = ((BitmapDrawable) ResourcesCompat.getDrawable(getResources(),
                                R.drawable.robert_downey, null)).getBitmap();

         //creating new mat
         Mat mat = new Mat();

         //converting bitmap to ARGB_8888 format for compatibility with mat
         Bitmap bmp32 = bitmapInput.copy(Bitmap.Config.ARGB_8888, true);

         //storing bitmap to mat.
         Utils.bitmapToMat(bmp32, mat);

         //converting mat to grayscale image.
         Imgproc.cvtColor(mat, mat, Imgproc.COLOR_BGR2GRAY);

         //creating new bitmap for storing output.
         Bitmap bitmapOutput = Bitmap.createBitmap(bitmapInput.getWidth(), bitmapInput.getHeight(), bitmapInput.getConfig());

         //copying op to bitmap
         Utils.matToBitmap(mat,bitmapOutput);

         imageView.setImageBitmap(bitmapOutput);

    }

    //sample cpp boilerplate code generated by android studio. we will use it later for JNI connectivity.
    public native String stringFromJNI();
}
